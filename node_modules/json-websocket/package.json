{
  "name": "json-websocket",
  "version": "0.1.5",
  "author": {
    "name": "Isaac Simmons",
    "email": "isaac.simmons@gmail.com"
  },
  "description": "JSON WebSocket. Simple abstraction on top of websockets to send 'typed' JSON objects and emit received messages by type. Suitable for use in Node or the browser.",
  "keywords": [
    "json",
    "websocket",
    "messaging"
  ],
  "homepage": "https://bitbucket.org/arcticfox/json-websocket",
  "bugs": {
    "url": "https://bitbucket.org/arcticfox/json-websocket/issues"
  },
  "main": "./lib/main",
  "repository": {
    "type": "hg",
    "url": "https://bitbucket.org/arcticfox/json-websocket"
  },
  "scripts": {
    "test": "test/test.js"
  },
  "dependencies": {
    "websocket": "1.x"
  },
  "license": {
    "type": "MIT",
    "url": "https://bitbucket.org/arcticfox/json-websocket/src/default/LICENSE"
  },
  "readme": "JSON WebSocket is a lightweight wrapper around the [websocket](https://github.com/Worlize/WebSocket-Node) implementation. Event types and objects are automatically translated to and from JSON, and emitted as events when received.\n\n# Installation #\n\nInstall JsonWebSocket using Node Package Manager (npm):\n\n    npm install json-websocket\n\n# Usage #\n\nExample client (found in `examples/client.js`)\n\n    var main = require('../lib/main');\n\n    var client = main.client({ host: 'localhost', port: 8000, verbose: true });\n\n    client.connect.on('connect', function() {\n      client.send('greeting', 'Websocket client here');\n    });\n\n    client.on('add', function(v1, v2, callback) {\n      callback(v1 + v2);\n    });\n\n    setTimeout(function() {\n      client.disconnect();\n    }, 1000);\n\nExample server (found in `examples/server.js`)\n\n    var http = require('http').createServer();\n    var main = require('../lib/main');\n\n    var server = main.server({ httpServer: http, verbose: true });\n\n    server.on('multiply', function(clientId, v1, v2, callback) {\n      callback(v1 * v2);\n    });\n\n    server.on('tick', function(clientId, time) {\n      //Process \"tick\" event here\n    });\n\n    server.connect.on('connect', function(clientId) {\n      server.send(clientId, 'greet', 'Greetings, client #' + clientId);\n    });\n\n    server.connect.on('disconnect', function(clientId) {\n      //Client disconnected\n    });\n\n    http.listen(8000);\n\nExample browser client (from `examples/browser.html`):\n\n    var client = jsonSocket({\n      host: 'localhost',\n      port: 8000,\n      verbose: true\n    });\n\n    client.connect.on('connect', function() {\n      client.send('greeting', 'Websocket client here');\n    });\n\n    client.on('add', function(v1, v2, callback) {\n      callback(v1 + v2);\n    });\n\n**You must first build the browser bundle with `./browserify.sh` before browser.html will work.**\n\n# API #\n\n## Server ##\n\nTo create a server, use `require('json-websocket').server(opts);`.\n\nOptions:\n\n* `httpServer`: A [http.Server](http://nodejs.org/api/http.html#http_class_http_server) object that the websocket will bind to\n* `path`: The URL path the websocket will listen on in the server. Defaults to `/`\n* `verbose`: Any truthy value will enable debug logging to `console.log`\n* `protocol`: Name of the websocket protocol to support. Defaults to `'json-websocket'`\n* `maxListeners`: Controls the maximum number of listeners that can be attached to the resulting EventEmitter. Use `0` for unlimited. Defaults to `10`\n\nThis returns an [Event Emitter](http://nodejs.org/api/events.html#events_class_events_emitter) with the following properties:\n\n###Event: 'js:connect'###\n`function (clientId) { }`\n\nEmitted each time a new client successfully connects.\n\n###Event: 'js:disconnect'###\n`function (clientId) { }`\n\nEmitted each time a client disconnects.\n\n###Event: 'js:error'###\n`function (err) { }`\n\nEmitted on errors.\n\n###Event: \\*###\n`function (clientId, ...) { }`\n\nAll messages received by clients are emitted as events with the \"type\" of the sent message. \n\n###server.send(clientId, type, ...)###\n\nSend a message to the given client of the given type. `type` must be a `String` and cannot start with \"js:\". Any additional arguments provided to this function will be transmitted to the client and attached to the emitted event.\n\n###server.clients###\n\nAn object mapping client identifiers to the underlaying websocket connections.\n\n###server.numClients###\n\nThe number of currently connected clients.\n\n###server.isReady(clientId)###\n\nReturns `true` if there is a connected client with the given identifier that is in the ready state and has no currently buffered outgoing data, `false` otherwise.\n\n## Client ##\n\nTo create a client, use `require('json-websocket').client(opts);`.\n\nOptions:\n\n* `hostname`: The host that the client will attempt to connect to. Defaults to `localhost`\n* `port`: The port that the client will attempt to connect to. Defaults to `80`\n* `path`: The URL path that the client will attempt to connect to. Defaults to `/`\n* `verbose`: Any truthy value will enable debug logging to `console.log`\n* `protocol`: Name of the websocket protocol to request. Defaults to `'json-websocket'`\n* `maxListeners`: Controls the maximum number of listeners that can be attached to the resulting EventEmitter. Use `0` for unlimited. Defaults to `10`\n\n###Event: 'js:connect'###\n`function () { }`\n\nEmitted when the socket successfully connects.\n\n###Event: 'js:disconnect'###\n`function () { }`\n\nEmitted when the socket is closed.\n\n###Event: 'js:error'###\n`function (err) { }`\n\nEmitted on a connection failure.\n\n###Event: \\*###\n\nAll messages received by the server are emitted as events with the \"type\" of the sent message.\n\n###client.send(type, ...)###\n\nSend a message to the server with the given type. `type` must be a `String` and cannot start with \"js:\". Any additional arguments will be sent along to the server and attached to the emitted event.\n\nMessages sent before the `js:connect` event has been emitted will be queued and sent once the connection is established.\n\n###client.disconnect()###\n\nCloses the websocket connection.\n\n###client.isReady()###\n\nReturns `true` if the websocket connection is established, ready, and has no buffered outgoing data, `false` otherwise.\n\n## Browser ##\n\nJSON WebSocket can also be used in the browser with no dependency on the node [websocket](https://github.com/Worlize/WebSocket-Node) module relying instead on the browser's implementation.\n\nIn order to do this, you should include `./lib/browser.js` using a CommonJS bundler. For instance, using [browserify](http://browserify.org/):\n\n    browserify ./lib/browser.js -s jsonSocket -o bundle.js\n    \nor simply running the included `./browserify.sh` script. (Note that browserify must be installed on your system globally for this script to work.)\n\nPointing a web browser to `./examples/browser.html` on the local filesystem after generating the browser bundle will load an empty test page that will attempt to connect to the example server.\n\nThe `client` object in the global namespace is the connected json-socket object and the `jsonSocket` function in the global namespace is the method to create additional client sockets.\n\nThe client socket object has the same events and methods as the Node JS client object.\n\n# Testing #\n\nRun tests using Node Package Manager (npm):\n\n    npm test\n\n# License #\n\nCopyright (c) 2013 Isaac Simmons\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "json-websocket@0.1.5",
  "dist": {
    "shasum": "dea38c142a0e3563f96b7d53b582b8b58977cb40",
    "tarball": "https://registry.npmjs.org/json-websocket/-/json-websocket-0.1.5.tgz"
  },
  "_from": "json-websocket@latest",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "ids",
    "email": "isaac.simmons@gmail.com"
  },
  "maintainers": [
    {
      "name": "ids",
      "email": "isaac.simmons@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "dea38c142a0e3563f96b7d53b582b8b58977cb40",
  "_resolved": "https://registry.npmjs.org/json-websocket/-/json-websocket-0.1.5.tgz"
}
